/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrainingProgramService } from "../trainingProgram.service";
import { TrainingProgramCreateInput } from "./TrainingProgramCreateInput";
import { TrainingProgram } from "./TrainingProgram";
import { TrainingProgramFindManyArgs } from "./TrainingProgramFindManyArgs";
import { TrainingProgramWhereUniqueInput } from "./TrainingProgramWhereUniqueInput";
import { TrainingProgramUpdateInput } from "./TrainingProgramUpdateInput";

export class TrainingProgramControllerBase {
  constructor(protected readonly service: TrainingProgramService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TrainingProgram })
  async createTrainingProgram(
    @common.Body() data: TrainingProgramCreateInput
  ): Promise<TrainingProgram> {
    return await this.service.createTrainingProgram({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TrainingProgram] })
  @ApiNestedQuery(TrainingProgramFindManyArgs)
  async trainingPrograms(
    @common.Req() request: Request
  ): Promise<TrainingProgram[]> {
    const args = plainToClass(TrainingProgramFindManyArgs, request.query);
    return this.service.trainingPrograms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TrainingProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trainingProgram(
    @common.Param() params: TrainingProgramWhereUniqueInput
  ): Promise<TrainingProgram | null> {
    const result = await this.service.trainingProgram({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TrainingProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrainingProgram(
    @common.Param() params: TrainingProgramWhereUniqueInput,
    @common.Body() data: TrainingProgramUpdateInput
  ): Promise<TrainingProgram | null> {
    try {
      return await this.service.updateTrainingProgram({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TrainingProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrainingProgram(
    @common.Param() params: TrainingProgramWhereUniqueInput
  ): Promise<TrainingProgram | null> {
    try {
      return await this.service.deleteTrainingProgram({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
