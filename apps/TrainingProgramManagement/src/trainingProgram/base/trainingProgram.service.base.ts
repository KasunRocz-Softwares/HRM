/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TrainingProgram as PrismaTrainingProgram,
} from "@prisma/client";

export class TrainingProgramServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrainingProgramCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trainingProgram.count(args);
  }

  async trainingPrograms<T extends Prisma.TrainingProgramFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrainingProgramFindManyArgs>
  ): Promise<PrismaTrainingProgram[]> {
    return this.prisma.trainingProgram.findMany<Prisma.TrainingProgramFindManyArgs>(
      args
    );
  }
  async trainingProgram<T extends Prisma.TrainingProgramFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrainingProgramFindUniqueArgs>
  ): Promise<PrismaTrainingProgram | null> {
    return this.prisma.trainingProgram.findUnique(args);
  }
  async createTrainingProgram<T extends Prisma.TrainingProgramCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrainingProgramCreateArgs>
  ): Promise<PrismaTrainingProgram> {
    return this.prisma.trainingProgram.create<T>(args);
  }
  async updateTrainingProgram<T extends Prisma.TrainingProgramUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrainingProgramUpdateArgs>
  ): Promise<PrismaTrainingProgram> {
    return this.prisma.trainingProgram.update<T>(args);
  }
  async deleteTrainingProgram<T extends Prisma.TrainingProgramDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrainingProgramDeleteArgs>
  ): Promise<PrismaTrainingProgram> {
    return this.prisma.trainingProgram.delete(args);
  }
}
