/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeEnrollmentService } from "../employeeEnrollment.service";
import { EmployeeEnrollmentCreateInput } from "./EmployeeEnrollmentCreateInput";
import { EmployeeEnrollment } from "./EmployeeEnrollment";
import { EmployeeEnrollmentFindManyArgs } from "./EmployeeEnrollmentFindManyArgs";
import { EmployeeEnrollmentWhereUniqueInput } from "./EmployeeEnrollmentWhereUniqueInput";
import { EmployeeEnrollmentUpdateInput } from "./EmployeeEnrollmentUpdateInput";

export class EmployeeEnrollmentControllerBase {
  constructor(protected readonly service: EmployeeEnrollmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeEnrollment })
  async createEmployeeEnrollment(
    @common.Body() data: EmployeeEnrollmentCreateInput
  ): Promise<EmployeeEnrollment> {
    return await this.service.createEmployeeEnrollment({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeEnrollment] })
  @ApiNestedQuery(EmployeeEnrollmentFindManyArgs)
  async employeeEnrollments(
    @common.Req() request: Request
  ): Promise<EmployeeEnrollment[]> {
    const args = plainToClass(EmployeeEnrollmentFindManyArgs, request.query);
    return this.service.employeeEnrollments({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeEnrollment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employeeEnrollment(
    @common.Param() params: EmployeeEnrollmentWhereUniqueInput
  ): Promise<EmployeeEnrollment | null> {
    const result = await this.service.employeeEnrollment({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeEnrollment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmployeeEnrollment(
    @common.Param() params: EmployeeEnrollmentWhereUniqueInput,
    @common.Body() data: EmployeeEnrollmentUpdateInput
  ): Promise<EmployeeEnrollment | null> {
    try {
      return await this.service.updateEmployeeEnrollment({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeEnrollment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployeeEnrollment(
    @common.Param() params: EmployeeEnrollmentWhereUniqueInput
  ): Promise<EmployeeEnrollment | null> {
    try {
      return await this.service.deleteEmployeeEnrollment({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
