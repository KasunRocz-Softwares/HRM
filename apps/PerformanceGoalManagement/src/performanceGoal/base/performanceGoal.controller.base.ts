/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PerformanceGoalService } from "../performanceGoal.service";
import { PerformanceGoalCreateInput } from "./PerformanceGoalCreateInput";
import { PerformanceGoal } from "./PerformanceGoal";
import { PerformanceGoalFindManyArgs } from "./PerformanceGoalFindManyArgs";
import { PerformanceGoalWhereUniqueInput } from "./PerformanceGoalWhereUniqueInput";
import { PerformanceGoalUpdateInput } from "./PerformanceGoalUpdateInput";

export class PerformanceGoalControllerBase {
  constructor(protected readonly service: PerformanceGoalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PerformanceGoal })
  async createPerformanceGoal(
    @common.Body() data: PerformanceGoalCreateInput
  ): Promise<PerformanceGoal> {
    return await this.service.createPerformanceGoal({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PerformanceGoal] })
  @ApiNestedQuery(PerformanceGoalFindManyArgs)
  async performanceGoals(
    @common.Req() request: Request
  ): Promise<PerformanceGoal[]> {
    const args = plainToClass(PerformanceGoalFindManyArgs, request.query);
    return this.service.performanceGoals({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PerformanceGoal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async performanceGoal(
    @common.Param() params: PerformanceGoalWhereUniqueInput
  ): Promise<PerformanceGoal | null> {
    const result = await this.service.performanceGoal({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PerformanceGoal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePerformanceGoal(
    @common.Param() params: PerformanceGoalWhereUniqueInput,
    @common.Body() data: PerformanceGoalUpdateInput
  ): Promise<PerformanceGoal | null> {
    try {
      return await this.service.updatePerformanceGoal({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PerformanceGoal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePerformanceGoal(
    @common.Param() params: PerformanceGoalWhereUniqueInput
  ): Promise<PerformanceGoal | null> {
    try {
      return await this.service.deletePerformanceGoal({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
