/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PerformanceGoal } from "./PerformanceGoal";
import { PerformanceGoalCountArgs } from "./PerformanceGoalCountArgs";
import { PerformanceGoalFindManyArgs } from "./PerformanceGoalFindManyArgs";
import { PerformanceGoalFindUniqueArgs } from "./PerformanceGoalFindUniqueArgs";
import { DeletePerformanceGoalArgs } from "./DeletePerformanceGoalArgs";
import { PerformanceGoalService } from "../performanceGoal.service";
@graphql.Resolver(() => PerformanceGoal)
export class PerformanceGoalResolverBase {
  constructor(protected readonly service: PerformanceGoalService) {}

  async _performanceGoalsMeta(
    @graphql.Args() args: PerformanceGoalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PerformanceGoal])
  async performanceGoals(
    @graphql.Args() args: PerformanceGoalFindManyArgs
  ): Promise<PerformanceGoal[]> {
    return this.service.performanceGoals(args);
  }

  @graphql.Query(() => PerformanceGoal, { nullable: true })
  async performanceGoal(
    @graphql.Args() args: PerformanceGoalFindUniqueArgs
  ): Promise<PerformanceGoal | null> {
    const result = await this.service.performanceGoal(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PerformanceGoal)
  async deletePerformanceGoal(
    @graphql.Args() args: DeletePerformanceGoalArgs
  ): Promise<PerformanceGoal | null> {
    try {
      return await this.service.deletePerformanceGoal(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
