/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeFeedbackService } from "../employeeFeedback.service";
import { EmployeeFeedbackCreateInput } from "./EmployeeFeedbackCreateInput";
import { EmployeeFeedback } from "./EmployeeFeedback";
import { EmployeeFeedbackFindManyArgs } from "./EmployeeFeedbackFindManyArgs";
import { EmployeeFeedbackWhereUniqueInput } from "./EmployeeFeedbackWhereUniqueInput";
import { EmployeeFeedbackUpdateInput } from "./EmployeeFeedbackUpdateInput";

export class EmployeeFeedbackControllerBase {
  constructor(protected readonly service: EmployeeFeedbackService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeFeedback })
  async createEmployeeFeedback(
    @common.Body() data: EmployeeFeedbackCreateInput
  ): Promise<EmployeeFeedback> {
    return await this.service.createEmployeeFeedback({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeFeedback] })
  @ApiNestedQuery(EmployeeFeedbackFindManyArgs)
  async employeeFeedbacks(
    @common.Req() request: Request
  ): Promise<EmployeeFeedback[]> {
    const args = plainToClass(EmployeeFeedbackFindManyArgs, request.query);
    return this.service.employeeFeedbacks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeFeedback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employeeFeedback(
    @common.Param() params: EmployeeFeedbackWhereUniqueInput
  ): Promise<EmployeeFeedback | null> {
    const result = await this.service.employeeFeedback({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeFeedback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmployeeFeedback(
    @common.Param() params: EmployeeFeedbackWhereUniqueInput,
    @common.Body() data: EmployeeFeedbackUpdateInput
  ): Promise<EmployeeFeedback | null> {
    try {
      return await this.service.updateEmployeeFeedback({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeFeedback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployeeFeedback(
    @common.Param() params: EmployeeFeedbackWhereUniqueInput
  ): Promise<EmployeeFeedback | null> {
    try {
      return await this.service.deleteEmployeeFeedback({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
