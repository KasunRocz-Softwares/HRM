/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EmployeeFeedback as PrismaEmployeeFeedback,
} from "@prisma/client";

export class EmployeeFeedbackServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeeFeedbackCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employeeFeedback.count(args);
  }

  async employeeFeedbacks<T extends Prisma.EmployeeFeedbackFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeFeedbackFindManyArgs>
  ): Promise<PrismaEmployeeFeedback[]> {
    return this.prisma.employeeFeedback.findMany<Prisma.EmployeeFeedbackFindManyArgs>(
      args
    );
  }
  async employeeFeedback<T extends Prisma.EmployeeFeedbackFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeFeedbackFindUniqueArgs>
  ): Promise<PrismaEmployeeFeedback | null> {
    return this.prisma.employeeFeedback.findUnique(args);
  }
  async createEmployeeFeedback<T extends Prisma.EmployeeFeedbackCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeFeedbackCreateArgs>
  ): Promise<PrismaEmployeeFeedback> {
    return this.prisma.employeeFeedback.create<T>(args);
  }
  async updateEmployeeFeedback<T extends Prisma.EmployeeFeedbackUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeFeedbackUpdateArgs>
  ): Promise<PrismaEmployeeFeedback> {
    return this.prisma.employeeFeedback.update<T>(args);
  }
  async deleteEmployeeFeedback<T extends Prisma.EmployeeFeedbackDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeFeedbackDeleteArgs>
  ): Promise<PrismaEmployeeFeedback> {
    return this.prisma.employeeFeedback.delete(args);
  }
}
