/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PerformanceReviewService } from "../performanceReview.service";
import { PerformanceReviewCreateInput } from "./PerformanceReviewCreateInput";
import { PerformanceReview } from "./PerformanceReview";
import { PerformanceReviewFindManyArgs } from "./PerformanceReviewFindManyArgs";
import { PerformanceReviewWhereUniqueInput } from "./PerformanceReviewWhereUniqueInput";
import { PerformanceReviewUpdateInput } from "./PerformanceReviewUpdateInput";

export class PerformanceReviewControllerBase {
  constructor(protected readonly service: PerformanceReviewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PerformanceReview })
  async createPerformanceReview(
    @common.Body() data: PerformanceReviewCreateInput
  ): Promise<PerformanceReview> {
    return await this.service.createPerformanceReview({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PerformanceReview] })
  @ApiNestedQuery(PerformanceReviewFindManyArgs)
  async performanceReviews(
    @common.Req() request: Request
  ): Promise<PerformanceReview[]> {
    const args = plainToClass(PerformanceReviewFindManyArgs, request.query);
    return this.service.performanceReviews({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PerformanceReview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async performanceReview(
    @common.Param() params: PerformanceReviewWhereUniqueInput
  ): Promise<PerformanceReview | null> {
    const result = await this.service.performanceReview({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PerformanceReview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePerformanceReview(
    @common.Param() params: PerformanceReviewWhereUniqueInput,
    @common.Body() data: PerformanceReviewUpdateInput
  ): Promise<PerformanceReview | null> {
    try {
      return await this.service.updatePerformanceReview({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PerformanceReview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePerformanceReview(
    @common.Param() params: PerformanceReviewWhereUniqueInput
  ): Promise<PerformanceReview | null> {
    try {
      return await this.service.deletePerformanceReview({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
