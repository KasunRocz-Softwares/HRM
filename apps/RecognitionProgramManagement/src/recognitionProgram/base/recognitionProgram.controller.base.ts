/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecognitionProgramService } from "../recognitionProgram.service";
import { RecognitionProgramCreateInput } from "./RecognitionProgramCreateInput";
import { RecognitionProgram } from "./RecognitionProgram";
import { RecognitionProgramFindManyArgs } from "./RecognitionProgramFindManyArgs";
import { RecognitionProgramWhereUniqueInput } from "./RecognitionProgramWhereUniqueInput";
import { RecognitionProgramUpdateInput } from "./RecognitionProgramUpdateInput";

export class RecognitionProgramControllerBase {
  constructor(protected readonly service: RecognitionProgramService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecognitionProgram })
  async createRecognitionProgram(
    @common.Body() data: RecognitionProgramCreateInput
  ): Promise<RecognitionProgram> {
    return await this.service.createRecognitionProgram({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RecognitionProgram] })
  @ApiNestedQuery(RecognitionProgramFindManyArgs)
  async recognitionPrograms(
    @common.Req() request: Request
  ): Promise<RecognitionProgram[]> {
    const args = plainToClass(RecognitionProgramFindManyArgs, request.query);
    return this.service.recognitionPrograms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecognitionProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recognitionProgram(
    @common.Param() params: RecognitionProgramWhereUniqueInput
  ): Promise<RecognitionProgram | null> {
    const result = await this.service.recognitionProgram({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecognitionProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecognitionProgram(
    @common.Param() params: RecognitionProgramWhereUniqueInput,
    @common.Body() data: RecognitionProgramUpdateInput
  ): Promise<RecognitionProgram | null> {
    try {
      return await this.service.updateRecognitionProgram({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecognitionProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecognitionProgram(
    @common.Param() params: RecognitionProgramWhereUniqueInput
  ): Promise<RecognitionProgram | null> {
    try {
      return await this.service.deleteRecognitionProgram({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
